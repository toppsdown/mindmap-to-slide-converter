<map version="0.9.0"><attribute_registry SHOW_ATTRIBUTES="hide"/>
<node ID="565AE416-330C-41B5-A622-5CF4F7741B72" TEXT="Week 1 slides teacher version" STYLE="bubble" FOLDED="false" CREATED="1476629036000" MODIFIED="1476629063000"><font SIZE="18" /><edge COLOR="#00A9FF" /><node ID="A378E9C2-0EA2-4181-8CB3-6A834C038EE9" TEXT="Legend" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476629260000" MODIFIED="1476629261000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="114A33FB-03C4-4711-A128-CC6043839B8A" TEXT="Slides" STYLE="fork" FOLDED="false" CREATED="1476751604000" MODIFIED="1476751607000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="CE15B275-912C-485F-A166-E197AA4B384D" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476751607000" MODIFIED="1477612441789"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="5F172A04-8053-44F7-AC0B-67E1D8AC9B38" TEXT="Header of slide" STYLE="fork" FOLDED="false" CREATED="1476751636000" MODIFIED="1477612441789"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="6AB18933-056D-4B4D-8FF7-734A04F73BF1" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476751609000" MODIFIED="1476751610000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="F17DBB6E-33E3-4C13-B18C-8F53E6E0E0D1" TEXT="Single Section Content" STYLE="fork" FOLDED="false" CREATED="1476751614000" MODIFIED="1476751618000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="532DD41D-6294-427C-8C88-DDB2E1C4609D" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476751610000" MODIFIED="1476751612000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="BE40D44A-4E72-4259-A8E6-F97AEAA1A02D" TEXT="Multi Section Content Verticle" STYLE="fork" FOLDED="false" CREATED="1476751619000" MODIFIED="1476751625000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="9125FF21-F43B-4C76-9540-0AAC2BE3CA3E" TEXT="MSCH" STYLE="fork" FOLDED="false" CREATED="1476751612000" MODIFIED="1476751613000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="F394ECCE-2E68-44AF-9AD5-C73D95EAF7D2" TEXT="Multi Section Content Horizontal" STYLE="fork" FOLDED="false" CREATED="1476751627000" MODIFIED="1476751635000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="67D990AF-09A8-4A6B-98FD-732245359E28" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476629261000" MODIFIED="1476629262000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="30C55EC9-7CDD-40CF-8F67-9AF799A26B42" TEXT="teacher notes" STYLE="fork" FOLDED="false" CREATED="1476629262000" MODIFIED="1476629263000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="33C49FA5-7191-4C00-B974-8AE2CC13E97E" TEXT="Title Slide" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476629219000" MODIFIED="1476629219000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="C7B81472-31BB-4E03-9A0E-8AE86DAF1832" TEXT="Title" STYLE="fork" FOLDED="false" CREATED="1476629219000" MODIFIED="1476629219000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="03D52F68-BBB4-4E6A-8AE4-530964122301" TEXT="Week 1" STYLE="fork" FOLDED="false" CREATED="1476629219000" MODIFIED="1476629219000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="40D8FD37-B64F-4454-8DAF-EBC5CB109EFA" TEXT="Subtitle" STYLE="fork" FOLDED="false" CREATED="1476629219000" MODIFIED="1476629219000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="5A81D247-033F-4CEA-AEF3-F395A3E47F5F" TEXT="Intro to programming with Ruby" STYLE="fork" FOLDED="false" CREATED="1476629219000" MODIFIED="1476629219000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="77ABD316-1BC6-4A53-950D-7D14E650285B" TEXT="What we're learning today" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476748166000" MODIFIED="1476748171000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="BF1F6478-A374-4842-A6F9-8A4A9C85F893" TEXT="Problem solving framework" STYLE="fork" FOLDED="false" CREATED="1476748177000" MODIFIED="1476748184000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="A44E020B-2B98-47E1-BE2D-9F359F9B49F7" TEXT="Repl.it" STYLE="fork" FOLDED="false" CREATED="1476748260000" MODIFIED="1476748264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="C79727A8-B63D-422D-BDB3-B47F1E86F343" TEXT="Data Types" STYLE="fork" FOLDED="false" CREATED="1476748218000" MODIFIED="1476748220000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="B32BDC06-A3C5-4CDE-80C4-B4170C458152" TEXT="Arrays" STYLE="fork" FOLDED="false" CREATED="1476748220000" MODIFIED="1476748221000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="C2B685B7-A294-4EC1-B332-08365581347E" TEXT="Strings" STYLE="fork" FOLDED="false" CREATED="1476748224000" MODIFIED="1476748225000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="235B7DC0-7378-46D9-8D74-E46EDA627E52" TEXT="Booleans" STYLE="fork" FOLDED="false" CREATED="1476748222000" MODIFIED="1476748224000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="F12B3B0A-6E8B-447D-87F6-194D392BC52C" TEXT="Conditionals" STYLE="fork" FOLDED="false" CREATED="1476748234000" MODIFIED="1476748236000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="8A8E416C-523B-4C0A-8171-9351019FDD3F" TEXT="Abstraction" STYLE="fork" FOLDED="false" CREATED="1476748189000" MODIFIED="1476748192000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="0E5837C8-28E8-4EA3-90CD-6E4156943AA3" TEXT="Variables" STYLE="fork" FOLDED="false" CREATED="1476748192000" MODIFIED="1476748201000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="A39A024C-4A0D-477D-9790-A36ACFC995B3" TEXT="Loops" STYLE="fork" FOLDED="false" CREATED="1476748195000" MODIFIED="1476748203000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="2B737009-B19A-401C-8E55-0BBD00DEAB11" TEXT="Functions" STYLE="fork" FOLDED="false" CREATED="1476748203000" MODIFIED="1476748204000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="4AEEDB3A-D75E-4E10-9935-1D5539D7EBC8" TEXT="Introduction to programming" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476629240000" MODIFIED="1476629240000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="5E96202E-0005-490B-8F30-A9C5BC4931BC" TEXT="Slides" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="912A34EB-9526-4999-9970-F21B4D4C40B6" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><edge COLOR="#D5D5D5" /><node ID="6208C526-C1EC-4DD4-B81F-CEBB12B98906" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1477612441789"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8379F4EF-E64F-472F-8570-431789DE9CFD" TEXT="What is programming?" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="EC2220AB-8381-4E71-9719-29EBF07E3CED" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476750880000" MODIFIED="1476750881000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="328465B3-F128-4A2D-8557-B5214DB9BD2C" TEXT="Teaching computers to solve problems" STYLE="fork" FOLDED="false" CREATED="1476750882000" MODIFIED="1476750883000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="EEFC1ED8-3180-4C38-8350-4814616E9937" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476629331000" MODIFIED="1476629332000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="BA59DC02-B8A7-4DF4-8D6B-46E1582D279E" TEXT="Teaching computers to solve problems" STYLE="fork" FOLDED="false" CREATED="1476629332000" MODIFIED="1476629339000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="3EB5BB77-7C24-45F6-B5FA-C00A6F6418BA" TEXT="imagine the computer is a child" STYLE="fork" FOLDED="false" CREATED="1476750885000" MODIFIED="1476750898000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="C1DF427C-C637-4ACC-819B-72D3826D2760" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><edge COLOR="#D5D5D5" /><node ID="146CBD1E-125C-4942-A9A9-881095E380D7" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1477612441789"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="782F18C9-552C-427D-9126-27BEEC71666E" TEXT="Why is Programming hard?" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="9BCAE476-3583-486F-8D1C-A0A3AE89C7CF" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="3282FBC6-7ADB-4D0E-B875-3B365FB02BEB" TEXT="1) Computers are dumb&#10;2) They only know what we teach them&#10;3) They can only do one thing at a time&#10;4) They don't understand human language" STYLE="fork" FOLDED="false" CREATED="1476629240000" MODIFIED="1476629240000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="AD15498E-92FB-4641-9567-B58813E05B90" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476629342000" MODIFIED="1476629343000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="28103A4B-9372-4C16-B970-F62A0268888B" TEXT="Computers do not have intelligence, they will follow our instructions exactly" STYLE="fork" FOLDED="false" CREATED="1476629343000" MODIFIED="1476629385000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="96CFE3E1-151D-4D3E-9424-5FD2849D3702" TEXT="When we talk to each other, we have a common context by which we communicate.  Our language is full of ambiguities so we have to make assumptions about what the other speaker means.  Computers do not make assumptions" STYLE="fork" FOLDED="false" CREATED="1476629356000" MODIFIED="1476629462000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="166343E4-4379-41F5-BE74-F7D54F919BA9" TEXT="Human language is imprecise.  Computer language is not" STYLE="fork" FOLDED="false" CREATED="1476629471000" MODIFIED="1476629498000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="ADBE5F7A-F1B3-46CC-9889-FC0881699362" TEXT="The hard part of programming is not learning the language, it's being able to critically analyze all the contexts that we take for granted when we communicate to each other" STYLE="fork" FOLDED="false" CREATED="1476629498000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="AF76D7E5-3E6B-4B95-994B-B5F2680858CD" TEXT="One of the most important things to remember is that COMPUTERS CAN ONLY DO ONE THING AT A TIME" STYLE="fork" FOLDED="false" CREATED="1476629813000" MODIFIED="1476629827000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node><node ID="7A00EF98-BAE9-43D4-A133-51EA3435C609" TEXT="Programming framework" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476629550000" MODIFIED="1476629554000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="350D69CD-4B08-4A94-A585-F1A373D31B6A" TEXT="Slides" STYLE="fork" FOLDED="false" CREATED="1476629752000" MODIFIED="1476629754000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C269F2D7-A918-4FF9-B9FF-118026111419" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><edge COLOR="#D5D5D5" /><node ID="A1258A72-6FD0-4147-A076-6356F4E2AD36" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="3FFAE516-4322-40D3-B470-C92FAD739747" TEXT="Problem solving framework" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="AAF4447A-8D0D-48F8-92FE-690EBA9D2AD4" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="4B42EBE3-A28A-445A-9C83-317624EB434E" TEXT="1) Define the problem&#10;2) List the subproblems&#10;3) Solve/Recurse" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="61BE6364-08BF-4CF7-9621-F6A6EB269A73" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476629773000" MODIFIED="1476629774000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="28E2FE07-486A-490E-8B01-DD16C5D61067" TEXT="So how do we start to think like a computer?" STYLE="fork" FOLDED="false" CREATED="1476750946000" MODIFIED="1476750955000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="D37ACDB0-B559-4D2B-9842-9DEB32EDC50C" TEXT="A lot of the problems we think about doing are actually lots of little problems put together" STYLE="fork" FOLDED="false" CREATED="1476629792000" MODIFIED="1476630080000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B4205F7C-F17E-4EA4-A58C-7677C5AC7EB8" TEXT="Because computers can only do one thing at a time, we need to break down our problems as small as possible" STYLE="fork" FOLDED="false" CREATED="1476630153000" MODIFIED="1476630175000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="C4696835-C058-4121-B780-8FE058EC5FF9" TEXT="Subject: Recursion" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="653DDEC9-3C57-4EA4-A3B4-3EB0DF8E0331" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><edge COLOR="#D5D5D5" /><node ID="DECF0A23-3ECF-4BB9-BFAC-27D5B0B3E7A9" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C1C6A00D-C5B2-48DA-84C8-D3CBFF05EE62" TEXT="Scary word alert: Recursion" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="1E01E837-092B-4B0C-A0E4-FA1F20EC8326" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476630282000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="25E38FC3-EE94-4C1F-AAC6-6A3CB8E79A48" TEXT="Recursion means repeating the same process with smaller piece of the original problem" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476750983000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E545D614-7C36-406E-A376-65A24D3393A7" TEXT="We stop recursing when the problem is simple enough to solve" STYLE="fork" FOLDED="false" CREATED="1476630284000" MODIFIED="1476630284000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="49027126-24EE-40FF-BB3F-58C9F2AD1CD0" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476630288000" MODIFIED="1476630288000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="4DEB767E-0724-481E-B8D0-D12D88C1CF97" TEXT="What I mean by recursion here in our framework is that we will use the same framework on each of the subproblems until they are simple enough that we know how to tell the computer how to do them" STYLE="fork" FOLDED="false" CREATED="1476630289000" MODIFIED="1476630345000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="D7E8AD40-2615-4F28-9D32-D42C01B49579" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><edge COLOR="#D5D5D5" /><node ID="72995CBB-5945-41C2-AE13-CBE34EE97AEA" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1A38CF69-B144-441B-83B2-FABA77ACAF74" TEXT="Problem solving framework" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="5A89E8F1-75EC-4D30-A4EB-8DCF67B29A21" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FD95AA2B-285D-4AFC-AC25-7AC227D720AC" TEXT="So our framework really looks like this:" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B62C1994-274E-40E9-AB81-4BF58ED5C953" TEXT="1) Define the problem&#10;2) List the subproblems&#10;&#10;- if one subproblem:&#10;  3) solve&#10;&#10;- if multiple subproblems&#10;  3.1) recurse on subproblems&#10;  3.2) combine subsolutions" STYLE="fork" FOLDED="false" CREATED="1476629765000" MODIFIED="1476629765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node><node ID="A30227B3-0DBC-42AB-B8D3-821D00D4B774" TEXT="PBJ Exercise (No Code)" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476630363000" MODIFIED="1476630370000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="B3FE3654-C63D-4FCD-A688-E5ABE10F819C" TEXT="Slides" STYLE="fork" FOLDED="false" CREATED="1476630399000" MODIFIED="1476630402000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="A8E52AFD-1ABA-4E10-BD48-3699415C868D" STYLE="fork" FOLDED="false" CREATED="1476630402000" MODIFIED="1476630402000"><edge COLOR="#D5D5D5" /><node ID="F9589D92-A08E-45E4-A202-2C55483B00A4" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476630403000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="253A626D-EA8F-4D0A-B37A-190A550C97F1" TEXT="Exercise: Make a peanut butter and jelly sandwich" STYLE="fork" FOLDED="false" CREATED="1476630405000" MODIFIED="1476630416000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="31C067DF-1229-407C-9436-5BB07309D212" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476630412000" MODIFIED="1476630421000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="0A696C1A-2D7E-448A-9F58-CD9DD5A08E73" TEXT="Picture of PBJ" STYLE="fork" FOLDED="false" CREATED="1476630421000" MODIFIED="1476630423000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="440D029B-0226-4629-804E-3D8F8E2AA43B" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476630426000" MODIFIED="1476630426000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="07960DBA-1355-4404-9934-41DBCDD80B6A" TEXT="Everyone take a minute to write down the instructions for how to make a peanut butter and jelly sandwich" STYLE="fork" FOLDED="false" CREATED="1476630426000" MODIFIED="1476630514000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="BA8774EA-2DD1-45C0-A166-42ED6E07D9D1" TEXT="wait a minute" STYLE="fork" FOLDED="false" CREATED="1476630550000" MODIFIED="1476630552000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E900382B-2D99-46EC-9B4B-DBF2D6ED78EA" TEXT="have people compare their answers to show that depending on how much detail you want to go into, there's actually a lot of steps for making a PBJ" STYLE="fork" FOLDED="false" CREATED="1476630553000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="DEF8755E-410E-4ADA-ADA7-0189D767513A" STYLE="fork" FOLDED="false" CREATED="1476630594000" MODIFIED="1476630594000"><edge COLOR="#D5D5D5" /><node ID="75A1294C-F8B3-4688-A38A-FFF6154D2FF1" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476630594000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="DA4AEBF0-9D4F-4EEB-9D86-895A94C176FE" TEXT="Exercise: Use framework to make a PBJ" STYLE="fork" FOLDED="false" CREATED="1476630598000" MODIFIED="1476630609000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="72E8A7F4-C1D1-4C5D-A37E-3E553AE2ED0A" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476630596000" MODIFIED="1476630598000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="89723C6A-BDB5-4C73-8B2A-D7F4B00A878C" TEXT="1) Define the problem&#10;2) List the subproblems&#10;&#10;- if one subproblem:&#10;  3) solve&#10;&#10;- if multiple subproblems&#10;  3.1) recurse on subproblems&#10;  3.2) combine subsolutions" STYLE="fork" FOLDED="false" CREATED="1476630642000" MODIFIED="1476630642000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="05A4D08B-1E1E-464F-B1F5-06A983FE034E" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476630643000" MODIFIED="1476630644000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="277A425D-864F-4916-A164-AE6B178B7045" TEXT="Go through the first round of subproblems as a class" STYLE="fork" FOLDED="false" CREATED="1476630644000" MODIFIED="1476630693000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="18A79FE8-58B7-4748-B76D-DCEC0B5D17B7" TEXT="Should wind up as something like" STYLE="fork" FOLDED="false" CREATED="1476630724000" MODIFIED="1476630733000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="AA94E629-7A44-4410-9E8E-8AF9A37A32EB" TEXT="1) Gather ingredients &#10;2) Put peanut butter on a slice of bread &#10;3) Put jelly on another slice of bread &#10;4) Put pieces together" STYLE="fork" FOLDED="false" CREATED="1476630729000" MODIFIED="1476630729000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="18B448B6-9A58-4CE5-B913-E64B7E8ACFB2" TEXT="Pair up with neighbor for 5 minutes to come up with more detailed instructions" STYLE="fork" FOLDED="false" CREATED="1476630694000" MODIFIED="1476630715000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="71E5CD2E-52A4-42CB-9AE1-09E48A68C2A6" STYLE="fork" FOLDED="false" CREATED="1476630771000" MODIFIED="1476630771000"><edge COLOR="#D5D5D5" /><node ID="33A97D63-06D2-40AE-B7A9-692277091974" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476630771000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="80054A3B-96C5-4060-BDB2-9D3DC30FEA3D" TEXT="Scary word alert: Algorithm" STYLE="fork" FOLDED="false" CREATED="1476630771000" MODIFIED="1476630771000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="96C00A7C-78B8-4EC3-9372-864CEBF083EF" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476630771000" MODIFIED="1476630801000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="0EDA80FE-AA2D-42A6-AEB6-F85311F4F935" TEXT="An algorithm is a set of instructions for how to solve a problem" STYLE="fork" FOLDED="false" CREATED="1476630771000" MODIFIED="1476630771000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="B51C6A42-1051-449F-B99B-3929FA61A44E" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476630799000" MODIFIED="1476630799000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="025D23B6-623A-4CBD-ACF1-3FA60E01508D" TEXT="You just wrote an algorithm for how to make a PBJ sandwich" STYLE="fork" FOLDED="false" CREATED="1476630803000" MODIFIED="1476630803000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="45586E91-3EF3-424F-BB60-B5255259A078" TEXT="We're going to start coding, but first we need to learn about our coding environment" STYLE="fork" FOLDED="false" CREATED="1476751153000" MODIFIED="1476751165000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node><node ID="1CC8025E-B517-411D-8B33-22928C97181D" TEXT="Intro to REPL.it" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476747418000" MODIFIED="1476747422000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="9D2C647F-D642-4710-B8F4-BC75C8DDC04C" TEXT="File vs Interactive" STYLE="fork" FOLDED="false" CREATED="1476748682000" MODIFIED="1476748692000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="49B6BFC2-B73E-457E-AD49-55315C4A6089" STYLE="fork" FOLDED="false" CREATED="1476748782000" MODIFIED="1476748782000"><edge COLOR="#D5D5D5" /><node ID="D3CE0C1D-12EC-4902-B898-9459F4F75067" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476748784000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C4390DCC-F469-4719-A2A8-F9DED4E91B0F" TEXT="File" STYLE="fork" FOLDED="false" CREATED="1476748785000" MODIFIED="1476748786000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="6293FE1C-B269-4539-B516-C05EDD019E7B" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476748787000" MODIFIED="1476748790000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="53311499-C80B-43E1-A129-10C71F32AD2C" TEXT="We can write all our code here" STYLE="fork" FOLDED="false" CREATED="1476748790000" MODIFIED="1476748794000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D31051CE-C600-4885-90DC-FDE7FC9D8997" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476748794000" MODIFIED="1476748795000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="0FE92070-5DDE-40BD-A73C-4E79D4AA210A" TEXT="We write our code in the file side.  We can save our work here" STYLE="fork" FOLDED="false" CREATED="1476748795000" MODIFIED="1476748823000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="009EBBE1-B355-4F9D-A3A3-C0E336C6C93B" STYLE="fork" FOLDED="false" CREATED="1476748826000" MODIFIED="1476748826000"><edge COLOR="#D5D5D5" /><node ID="B714B1B9-D7A9-497E-B0CA-27798B7B78E1" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476748826000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8B8F135A-17EE-4E6F-BF22-6B1EE6BA8F40" TEXT="Interactive session" STYLE="fork" FOLDED="false" CREATED="1476748827000" MODIFIED="1476748830000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="BE6C7323-7CC2-4114-958D-85A60DE3A670" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476748831000" MODIFIED="1476748832000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="03F2392C-5E39-43AB-8191-C24E57AF82CB" TEXT="The interactive session loads our code and lets us play with it" STYLE="fork" FOLDED="false" CREATED="1476748834000" MODIFIED="1476748866000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="61473B6B-2E6F-469A-8105-0FD1CDD084CC" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476748832000" MODIFIED="1476748833000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="7A54C1BF-17D5-422A-BDC1-79A7297476FF" TEXT="The interactive session does not get saved.  When we click &quot;Run&quot; all the code in our file side is run and loaded into the interactive session" STYLE="fork" FOLDED="false" CREATED="1476748867000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B91B61DD-8939-4DBD-B128-475B14A01CAF" TEXT="The last thing executed in our file will be returned in the interactive session" STYLE="fork" FOLDED="false" CREATED="1476748998000" MODIFIED="1476749009000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="2D641238-795F-4B38-B5F1-E18DE2CC60F7" TEXT="Create two documents" STYLE="fork" FOLDED="false" CREATED="1476747424000" MODIFIED="1476747436000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1EB3E83C-402C-485B-9B49-6C167DC44BB5" TEXT="One for our main work" STYLE="fork" FOLDED="false" CREATED="1476747436000" MODIFIED="1476747439000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B0B1BD3B-E245-4A58-82C3-D8EDEB538282" TEXT="One as a scratch pad" STYLE="fork" FOLDED="false" CREATED="1476747439000" MODIFIED="1476747442000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="0B745B5F-6B8E-4106-A290-6319CE9865BF" TEXT="Show how you can see the history of your changes so you can reference them later" STYLE="fork" FOLDED="false" CREATED="1476747444000" MODIFIED="1476747468000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="027E44C3-7002-4526-8D5E-060FDFA1FA17" TEXT="PBJ Exercise (code)" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476630747000" MODIFIED="1476630751000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="6F7851A0-1C0E-4BB9-82E1-F6281390BB55" TEXT="Slides" STYLE="fork" FOLDED="false" CREATED="1476630823000" MODIFIED="1476630824000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FD1BEA67-E3BE-4375-B0ED-F2D18DDFCA3F" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476630827000"><edge COLOR="#D5D5D5" /><node ID="3D6CE471-75B8-4AF8-8655-4919FD2936DB" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="06A09FC4-0C53-42C8-BFFD-60BE92E65F23" TEXT="Group Exercise: Your first program" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476630827000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="9B2C885B-5FCF-4D20-A16A-77F8FE051155" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476630840000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8FE53686-9B49-4B94-A4AC-A70D1D361D37" TEXT="Do we have all the right ingredients for a PBJ?" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476630928000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="04BF6D2E-9B8E-4702-AAD1-A1C87CA86D06" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476751285000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1467C70C-30B9-4BE6-9C3F-B23DCAF8D5DD" TEXT="Let's write a program that checks if we have all the ingredients we need in order to make a PBJ sandwich" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476630827000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="D9EA9A11-1934-423E-A6CB-2762509FD9A6" TEXT="everyone should open REPL.IT" STYLE="fork" FOLDED="false" CREATED="1476630827000" MODIFIED="1476630827000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="14E72488-C65F-4F0D-9212-F232AA149924" STYLE="fork" FOLDED="false" CREATED="1476631025000" MODIFIED="1476631025000"><edge COLOR="#D5D5D5" /><node ID="FC944AB4-EEDC-4AEB-A0A2-D59CC6D3EDE5" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476631025000" MODIFIED="1477612441788"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6222B48E-5D96-4A05-AEA7-DAEB3B84849A" TEXT="Exercise: Check for ingredients" STYLE="fork" FOLDED="false" CREATED="1476631025000" MODIFIED="1476631038000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="FA698AD6-43E1-4216-92CB-8424AFCDA19C" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476631025000" MODIFIED="1476631025000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="02C2DECA-5847-4394-A42E-C25D4EA26BD1" TEXT="1) Define the problem&#10;2) List the subproblems&#10;3) Solve/Recurse" STYLE="fork" FOLDED="false" CREATED="1476631025000" MODIFIED="1476631025000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="EE447514-524F-4A0C-BCD5-576D24C22680" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476631056000" MODIFIED="1476631059000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="9F1D69BB-5B34-48BC-A689-CE57D010E437" TEXT="as a group, walk through the framework until we need arrays" STYLE="fork" FOLDED="false" CREATED="1476631059000" MODIFIED="1476631068000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="204F3CC3-550A-4654-BA4D-90D4C901B311" TEXT="should look like" STYLE="fork" FOLDED="false" CREATED="1476631142000" MODIFIED="1476631144000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1784B6CB-F3BB-4DDA-BBCD-3EF11BB264A8" TEXT="1) Check if we have necessary ingredients&#10;  1.1) Define current inventory of ingredients&#10;    solve:&#10;  1.2) Check if inventory includes peanut butter&#10;  1.3) Check if inventory includes jelly&#10;  1.4) Check if inventory includes bread" STYLE="fork" FOLDED="false" CREATED="1476631647000" MODIFIED="1476631773000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="CF702AAC-F390-412D-8932-98F8591B63CB" TEXT="Section: Listing inventory" STYLE="fork" FOLDED="false" CREATED="1476638223000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="97FA5C89-D263-4573-AE55-623A8FCCE74A" TEXT="Subject: Arrays" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="4C745AD6-F0D3-40C5-BAA1-8560A45B6C63" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><edge COLOR="#D5D5D5" /><node ID="99B8114F-851F-48C9-9E08-AD40DBCE375C" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1477612441787"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="036C4073-31EB-4DD2-B2AF-BA520B3BAD36" TEXT="What is an Array?" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="E68654E6-FCD0-458A-9D17-29DADA34AA50" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1477614684990"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="9BF6F2CF-9DB0-4B0F-A66B-7004E5D2A2F7" TEXT="An Array is how we store a list in the computer" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="22E7560D-E122-46A2-8E1E-A4D8BEDE94F6" TEXT="To create an array:&#10;  - Use square brackets: []&#10;  - Separate items with commas" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="5D35B88E-DF86-4E31-8B75-E7C71F1F6B8B" TEXT="&lt;code&gt;[ 'peanut butter', 'jelly', 'bread' ]&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476751751000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="9FA8C703-4309-4447-81A2-DA18837A1C3B" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6F20D4B7-B3FD-4CB5-B7DB-B36FD1B6C1A5" TEXT="explain the terms element/item" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476751397000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="558A08CF-3846-432E-8715-A4F25A44027F" TEXT="Try it out in repl.it" STYLE="fork" FOLDED="false" CREATED="1476749154000" MODIFIED="1476749162000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="59CC1879-ACB1-4A83-8972-6CEF8D717157" TEXT="Subject: Strings" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="849148E9-0EE4-438B-BC03-20380098E273" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><edge COLOR="#D5D5D5" /><node ID="32490569-5255-4832-992C-24C130FF9006" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1477612441787"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="622E665E-4426-4764-87E9-221FB0D057BE" TEXT="What is a String?" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="9FBCE067-9B45-4376-A51C-0CCC59D72B09" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1477614684990"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FAB1911B-0FD4-462C-9D78-22D94A64E8CF" TEXT="A string is what we call text.  To a computer, text is a &#x201c;string of characters&quot;" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="9A0AF86B-658D-432F-B9B9-5069995CE386" TEXT="To create a string:&#10;  - Write text between quotations: 'hello', &#x201c;goodbye&quot;&#10;  - For now, we're only going to use single quotes" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="AD8A4721-DC55-4F6C-8442-CCF9ADFAD2D0" TEXT="&lt;code&gt;'peanut butter'&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476751774000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="61C3A838-9E61-43AC-BF30-3E52D7AF9F3C" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476749116000" MODIFIED="1476749117000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8434A999-5DD7-4CB0-90FA-C05657F97F63" TEXT="try writing a string in REPL.IT" STYLE="fork" FOLDED="false" CREATED="1476749117000" MODIFIED="1476749130000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="337E03A0-ED1C-405B-AF90-F8EF4EBB0786" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><edge COLOR="#D5D5D5" /><node ID="D8A7A47F-D08B-451E-B3F4-029091513B38" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1477612441787"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="27433580-AC74-4EF0-89D3-04D8E641912A" TEXT="Listing our inventory" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="F524F72B-C228-4E0C-94B3-7565E413548E" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="3CD79457-ADBE-4275-A88C-DFF3DB126F57" TEXT="Store our list of ingredients as an &#x201c;Array of Strings&quot;" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="A803AC9D-2B74-4DAE-B435-34D6E7A8E5DF" TEXT="&lt;code&gt;[ 'peanut butter', 'jelly', 'bread' ]&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476751791000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="33A67DC2-9200-441A-95FC-D6B392767151" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476638251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="87A7C153-29F0-49E8-BA38-7A009E34B48F" TEXT="1) Check if we have necessary ingredients&#10;  1.1) Define current inventory of ingredients&#10;    solve: &lt;code&gt;[ 'peanut butter', 'jelly', 'bread' ]&lt;/code&gt;&#10;  1.2) Check if inventory includes peanut butter&#10;  1.3) Check if inventory includes jelly&#10;  1.4) Check if inventory includes bread" STYLE="fork" FOLDED="false" CREATED="1476638251000" MODIFIED="1476752272000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="FC51DFEA-0859-4F25-AD06-BF3F5795B107" TEXT="Section: Checking ingredients" STYLE="fork" FOLDED="false" CREATED="1476638254000" MODIFIED="1476638260000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="EC7DEA17-D88C-4229-A8CE-A9055FDA68A1" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><edge COLOR="#D5D5D5" /><node ID="5F967E9A-DC56-41A7-8D31-FE8A3FFE1586" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1477612441787"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="701F96E7-DCC0-4E79-BEAD-BAA930539FA1" TEXT="Checking if we have peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="5E297419-67F7-49A7-9149-DC01CB8FEFC6" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="198D728C-70D4-4242-9383-458D07071BC1" TEXT="  1.2) Check if inventory includes peanut butter&#10;    1.2.1) Check if first item is peanut butter&#10;      1.2.1.1) Get first item in inventory&#10;        solve:&#10;      1.2.1.2) Compare to peanut butter&#10;        solve:&#10;    1.2.2) Check if second item is peanut butter&#10;    1.2.3) Check if third item is peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476751517000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="B5CEC358-E3CF-4F95-AC44-3F7568FF0254" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><edge COLOR="#D5D5D5" /><node ID="4C77370C-BF02-467D-B9EE-E6AEA4901C91" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1477612441787"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="ADC60661-CD1D-4BB1-9DF1-CE68A8B8752D" TEXT="Checking if we have peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="4D28176C-E681-4930-8679-FCA419B20264" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8D4ADED3-66EA-412D-A87C-B5B72A0B0251" TEXT="1) Get first item (we need array indexes)&#10;2) Compare against PB (we need boolean comparisons)" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="E9BFDC6D-40CC-45EE-B0DF-A3E518264E35" TEXT="Subject: Arrays" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="4AA457A2-0D64-4310-AE93-10DB744F47C0" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><edge COLOR="#D5D5D5" /><node ID="1029D59B-1FDB-4916-B765-F55982417A58" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1477612441787"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="99B55571-04D5-46FD-A303-73D6B26FA9B2" TEXT="Array Indexes" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="6F673941-EE79-4231-A188-905CF31867E4" TEXT="MSCH" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="075C3994-C6A4-4869-881D-2770465D1459" TEXT="Human list&#10;1) Peanut Butter&#10;2) Jelly&#10;3) Bread" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B8E8E03D-591B-4BD5-820C-3987CC35FB5D" TEXT="Computer List&#10;0) Peanut Butter&#10;1) Jelly&#10;2) Bread" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="85D86963-1D95-4A6A-9F95-D373C3A996A3" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D4FF51AC-5AE8-4EAC-A6B2-D5803A0D1B5F" TEXT="explain 0 indexing" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D45235AD-FC9B-4E2B-861C-EABF80FC1F47" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6FB83E12-4DF4-412B-8DBC-697769EAD3EC" TEXT="To access an item at a specific index, we use square brackets" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="823FE54C-16E7-4DFB-AD5E-CC09D8DE98A7" TEXT="&lt;code&gt;[ 'peanut butter', 'jelly', 'bread'][0]&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476751805000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B01E73B6-89CB-46D2-BDA0-F3B536F8EC4D" TEXT="returns &lt;code&gt;'peanut butter'&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="1BE5EF87-F91A-4186-B443-E897816F981A" TEXT="What does &lt;code&gt;[ 'peanut butter', 'jelly', 'bread'][2]&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="BA774AF7-AF37-4AD2-BF8B-53C7A8B928CB" TEXT="Subject: Booleans" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C67A59C2-1204-450D-AFE6-C5C829DD90E4" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><edge COLOR="#D5D5D5" /><node ID="ADAB5AE2-5A4E-4CE1-A822-778F51A45CF8" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1477612441786"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D1084EDD-A081-4D8E-93A4-B8E0C7B32BC2" TEXT="What's a Boolean?" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="ACABCFE5-200C-4DD2-A3BA-D7D6D863C20E" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="CCA95BF0-BBBE-47DC-8B62-B7AC31589E95" TEXT="A Boolean is how a computer represents &#x201c;true&quot; and &quot;false&quot;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="3FD88B2F-6105-4284-B5E1-BA0CFCB6A366" TEXT="&lt;code&gt;true&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476751821000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="E2A3FF06-C7C6-44D6-A764-ADB3A9EE3C1F" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><edge COLOR="#D5D5D5" /><node ID="C5A9790D-350A-409C-B8D6-BC485F1ED80C" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1477612441786"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E16BC5DA-7C29-4733-8B72-D82ECBEE7EB4" TEXT="Boolean comparison" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="45513E54-C741-40F6-8155-AC792B3AFE8F" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1C8F8021-330B-4BCD-BB64-30041D346839" TEXT="A boolean comparison is anything that compares two things and returns true or false" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E73FAB65-6E8D-47F9-87DF-3FCFCFF83E7F" TEXT="- equals: &lt;code&gt;==&lt;/code&gt;&#10;- not equals: &lt;code&gt;!=&lt;/code&gt;&#10;- inequality: &lt;code&gt;&gt;&lt;/code&gt;&#10;- inequality: &lt;code&gt;&lt;=&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="DC65B47C-B1E6-45B4-A465-9B4643A4E916" TEXT="More reading:" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C8CEDB4E-CA0B-4B5B-912D-C7ECE4C2D10E" TEXT="https://www.tutorialspoint.com/ruby/ruby_operators.htm" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="FFE4B6DC-42EE-468A-B32F-2C2ABF306F55" TEXT="Extra practice:" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="10D54A6A-C579-439E-830E-AFCD95DBA7A1" TEXT="https://learnrubythehardway.org/book/ex28.html" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="FEFCD4BC-0FAA-45E5-B14F-864BB77650CD" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="F177730E-6C37-4F75-A015-D29F369452DB" TEXT="Students should play around with boolean comparisons in REPL.IT" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="9581F126-7EAD-4F12-8351-177AD0505B16" TEXT="Let's combine these two pieces to check if the first item is peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="556DCA3B-5FE3-4856-BC2C-DE5899EE330C" TEXT="Now let's pop up a level" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="FD6942D2-AE27-4D70-B09A-865F1CCE56E2" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><edge COLOR="#D5D5D5" /><node ID="7D621DA6-695B-4FDF-9B9B-767667008F5B" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1477612441786"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6C93C608-175A-4C36-BD53-31C35ECA5ACE" TEXT="Checking if we have peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="B01E4FF0-C5B0-4A4A-86FF-69D335913A81" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FC8B16EF-D905-4F48-99FA-6394A0970C3F" TEXT="1) Compare first item to peanut butter&#10;2) Compare second item to peanut butter&#10;3) Compare third item to peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="19EB1B80-D216-48A1-992D-E8E99DF9975B" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8C76A3EC-4A1F-46CA-9C43-67674958E22E" TEXT="we can now check all the indexes in the array, but we need to combine them" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="F9332038-E901-4469-9998-35CBF317D6AD" TEXT="In english, how would we combine them to answer the question of &#x201c;do we have peanut butter&quot;" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6E3D7411-A55E-4BE8-86F5-A4A777776C3F" TEXT="the OR" STYLE="fork" FOLDED="false" CREATED="1476638274000" MODIFIED="1476638274000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="0C4346D7-8560-4230-8EAD-39D0E6478549" TEXT="Subject: Booleans" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="731CFC02-09BC-4872-A571-F16DDB6FC909" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><edge COLOR="#D5D5D5" /><node ID="669DF684-014F-4F90-A94B-1836AA6D0A3C" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1477612441786"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="3B50BDF9-E4C1-48B9-9CB2-7F9BA405CB5F" TEXT="Boolean operators" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="60B5FF42-3A1D-4DD2-B3F0-8CC250219B94" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C37EB9A1-197A-4444-9A29-FCB11C245D1D" TEXT="Boolean operators are what we use to combine multiple boolean expressions" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="21E42E27-8586-4F17-8EAF-97644FBDFE3D" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><edge COLOR="#D5D5D5" /><node ID="4CB5989A-10B5-4F64-B933-493FDD510A56" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1477612441786"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E29FBE62-C103-4325-BBA8-5D8B35F751AA" TEXT="Boolean operators (OR, ||)" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="DBA2C2C7-04A6-410B-BB8D-B26A925B9A9B" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D2FC470A-17DF-4367-907D-7DB3770EE2E4" TEXT="When we have multiple expressions, and only need one to be true, we use the &#x201c;OR&quot; operator &lt;code&gt;||&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="9BEA4E43-4C4E-436D-A754-FD01E88508A2" TEXT="ex. &lt;code&gt;true || false &lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="78FFFB8D-1A82-4F95-ADF1-6566CD7032C8" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="00269118-5C29-4E11-A97B-91E0CBFB91E7" TEXT="teach them &#x201c;pipe&quot; and &#x201c;double pipe&quot;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="97EB1478-32D0-4B73-A04E-F9B3A18A820D" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><edge COLOR="#D5D5D5" /><node ID="29CBB14C-925B-4F90-AE9F-973B2DA2E0E0" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1477612441786"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2B3AFAEC-F508-41DF-A642-829AEEBA990B" TEXT="Boolean operators (AND, &amp;&amp;)" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="A42FD034-DC3F-4AEE-8135-4F5D487EF459" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="71FA4C33-5FB3-40CF-B9E2-9D5C4EE02481" TEXT="When we have multiple expressions, and all need to be true, we use the &#x201c;AND&quot; operator &lt;code&gt;&amp;&amp;&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E4C00E97-6A04-4A01-A7CB-5111901BB559" TEXT="ex. &lt;code&gt;true &amp;&amp; false &lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="64AEADBB-CCFF-46B9-ACCF-808DACAEBA9C" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6D3E0F37-D9DE-43E9-9323-B44464609B7C" TEXT="teach them &#x201c;amp&quot; and &#x201c;double amp&quot;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="8A112CD0-EF3B-4691-A1F0-60066BFB59BB" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><edge COLOR="#D5D5D5" /><node ID="C4246950-C201-4790-8B67-184C8F1C5692" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1477612441785"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="B3FDEB7A-2D2D-4C28-999A-A1810B6E2C13" TEXT="WARNING" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="040393D5-AE2D-48DD-8B95-C0AD0E19F67F" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1E447629-B1B6-44FF-8001-7382E8BFDFCA" TEXT="Ruby also has &#x201c;and&quot; and &#x201c;or&quot; words in it.  DO NOT USE THESE.  They are not the same as &#x201c;&amp;&amp;&quot; and &#x201c;||&quot;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="0D1895DC-072C-486E-82D7-92481779BDA2" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><edge COLOR="#D5D5D5" /><node ID="8122D4A7-761E-470C-B32E-3487D26887CC" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1477612441785"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E1F81C98-79E4-4229-9861-17C7DD8C7CD6" TEXT="Checking if we have peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="2812B1DB-A497-4032-B792-2B7FC9F2BBB6" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="ABE75731-8F41-4BEA-B3BA-1B9DEEF4F987" TEXT="Let's complete this now" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="A0765A92-B616-4145-A1C5-AF469443341A" TEXT="1) Compare first item to peanut butter&#10;2) Compare second item to peanut butter&#10;3) Compare third item to peanut butter" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D4FEA2C9-38F0-4891-A1C6-EF67FB0D8D1D" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FA1C6E71-8D4B-4A95-A21B-DBDDA4337583" TEXT="&lt;code&gt;['peanut butter', 'jelly', 'bread' ][0] == 'peanut butter' ||&#10;['peanut butter', 'jelly', 'bread' ][1] == 'peanut butter' ||&#10;['peanut butter', 'jelly', 'bread' ][2] == 'peanut butter'&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476752368000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="A83553FD-E116-4482-AA8F-7329AB772B05" TEXT="Now let's pop up and solve all the subproblems and combine them" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E4BC4D3B-8C80-4C57-8346-22370FFFCDB2" TEXT="Walk them through combining things with the &amp;&amp;" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="C4F3AA48-B729-4665-8C63-07CCDE33843D" TEXT="But theres a problem!" STYLE="fork" FOLDED="false" CREATED="1476638327000" MODIFIED="1476638327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="4A42E527-0E2D-4792-A7BF-F3C2E4F5B3D8" TEXT="Subject: Control Flow" STYLE="fork" FOLDED="false" CREATED="1476742121000" MODIFIED="1476742129000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="0A0C2394-A264-4095-A3D8-D0C30F70BCF0" STYLE="fork" FOLDED="false" CREATED="1476742136000" MODIFIED="1476742136000"><edge COLOR="#D5D5D5" /><node ID="D6DA5725-0DA0-4B87-9C80-E5DCAD387889" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476742140000" MODIFIED="1477612441785"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="BFE91F61-3021-4F12-92F7-D8B9EF1320AA" TEXT="Control Flow" STYLE="fork" FOLDED="false" CREATED="1476742144000" MODIFIED="1476742149000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="63B0083F-8D50-482C-958C-B517B839C51F" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476742141000" MODIFIED="1476742143000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="6EF2DD18-7BAF-4DE2-AEA6-DCF54B62B7F3" TEXT="Telling a computer how to make decisions" STYLE="fork" FOLDED="false" CREATED="1476742156000" MODIFIED="1476742220000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="BB4852EB-FF95-4E5F-8B59-1263C9FB47E8" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476742165000" MODIFIED="1476742165000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C43BD6CD-6FC4-4FE1-9A7A-CD06CCEF41A1" TEXT="Now that we know how to evaluate conditionals, we can use those conditionals to teach the computer how to make decisions" STYLE="fork" FOLDED="false" CREATED="1476742165000" MODIFIED="1476742203000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="54D7B63D-A7F3-457B-8828-84BB4A9B5A65" TEXT="This is called control flow" STYLE="fork" FOLDED="false" CREATED="1476742185000" MODIFIED="1476742208000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="FC520269-8E4C-486F-B772-638EB0B94B04" TEXT="It's very similar to a flow chart" STYLE="fork" FOLDED="false" CREATED="1476742231000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="54B6C36D-68C7-4BB6-A7A8-571F03C0DC76" STYLE="fork" FOLDED="false" CREATED="1476742241000" MODIFIED="1476742241000"><edge COLOR="#D5D5D5" /><node ID="DEEF6C1C-8141-404C-8D58-B3EDE94C7DD8" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476742242000" MODIFIED="1477612441785"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2EE4662E-8F5E-46B3-8736-D8586C3E78E9" TEXT="Control Flow" STYLE="fork" FOLDED="false" CREATED="1476742244000" MODIFIED="1476742246000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="1CEAA7B4-1973-44E5-9B65-C99F4B856D94" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476742250000" MODIFIED="1476742251000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="F15735E9-AFC4-4C17-B9A6-22C58C742A24" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476742652000" MODIFIED="1476742653000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="725E9774-EAF4-4FFE-AB89-1971DBEA5317" TEXT="Create an example flow chart for what we want to demonstrate" STYLE="fork" FOLDED="false" CREATED="1476742654000" MODIFIED="1476752403000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="ECE6F080-2057-4782-BAD6-55B76176E88E" STYLE="fork" FOLDED="false" CREATED="1476742270000" MODIFIED="1476742270000"><edge COLOR="#D5D5D5" /><node ID="790FC4E2-52B4-49E8-BD69-A3AE49D6F68F" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476742272000" MODIFIED="1477612441784"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="AF3A8F54-3ED4-4F3B-A0DF-A1979CB9876B" TEXT="Control Flow: Conditionals" STYLE="fork" FOLDED="false" CREATED="1476742273000" MODIFIED="1476742279000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D2456840-6D83-42F6-99F4-FCC68607671D" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476742280000" MODIFIED="1476742281000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8C840F8C-3ACC-42F0-A5ED-C18797F6AE01" TEXT="&lt;code&gt;if some condition&#10;  do something&#10;else &#10;  do something else&#10;end&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476742288000" MODIFIED="1476752415000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="609F4E82-C4F9-4D38-9E83-184CE7D19BE3" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476742673000" MODIFIED="1476742674000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="7B1C26FA-7AAB-4F20-86EF-338FA9B074A4" TEXT="Convert the flow chart in previous slide into ruby" STYLE="fork" FOLDED="false" CREATED="1476742674000" MODIFIED="1476742700000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="FCEB5734-5C87-40F5-A82C-9BD20A3E055A" TEXT="Teach puts" STYLE="fork" FOLDED="false" CREATED="1476742785000" MODIFIED="1476742788000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2DC50F45-FC22-4E2C-8F87-7DAB446EB3DF" TEXT="put string" STYLE="fork" FOLDED="false" CREATED="1476748666000" MODIFIED="1476748669000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node></node><node ID="1E306D6B-D3A6-42A5-8183-FDD83A9177A9" TEXT="Subject: Debugging" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E1147392-C7C2-403D-AB0E-FF577D93AF15" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><edge COLOR="#D5D5D5" /><node ID="1D16ACE0-6611-44C9-B67F-4D2DE2153BD8" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1477612441784"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="25F0E610-D0A7-416E-8BAF-AA0A37691080" TEXT="Debugging an Error" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="68C62D50-392F-4073-B04C-927D6D275800" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2AFA68C0-7382-4309-998B-1F1D0168BD13" TEXT="What does this return?" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="1C59DD26-18C7-423C-AB9B-2E2A694F3EC9" TEXT="&lt;code&gt;['bread', 'peanut butter'][0] =='bread' || &#10;['bread', 'peanut butter'][1] =='bread' &amp;&amp; &#10;['bread', 'peanut butter'][0] =='jelly' || &#10;['bread', 'peanut butter'][1] =='jelly'&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476752028000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="5298C38B-A22F-4479-85E6-F80FEB3D2D53" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476634079000" MODIFIED="1476634080000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="12A494DB-4D07-46AC-9601-62D9A07EBF40" TEXT="let them type it all into repl.it" STYLE="fork" FOLDED="false" CREATED="1476634080000" MODIFIED="1476634089000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E96F6A36-2196-4344-B905-7DF1E37F1A8F" TEXT="Debug with them by going through what the computer is doing" STYLE="fork" FOLDED="false" CREATED="1476637676000" MODIFIED="1476637858000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="F31E13F1-9B2D-4D4D-966F-E49D9091F655" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><edge COLOR="#D5D5D5" /><node ID="A8370151-ADF1-4909-BE7F-4B6E9A08DE98" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1477612441784"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8DDC34CD-FEE7-45B2-971B-010E8532FAA2" TEXT="Precedence" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D6C6ED21-56C8-409B-B1FC-DA72488C29BB" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C12432FE-995C-468C-B315-BB9CA460EA2B" TEXT="Remember that a computer can only do one thing at a time.  Precedence how it chooses the order of things to do" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="84A1A993-71D3-44FE-B32B-F7F18AD01BB5" TEXT="Precedence table: https://www.techotopia.com/index.php/Ruby_Operator_Precedence" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="0CFF44A3-CECA-4EF0-A2E3-34024096990F" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><edge COLOR="#D5D5D5" /><node ID="E262DFA0-83B6-4E1A-A5A0-6AD2C288EC68" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1477612441784"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2B6603FC-1581-40E4-BF69-4F16283C3185" TEXT="Fix the precedence" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="F8832D9F-A099-4A00-AF83-5FC32A2467FB" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="EAB11BE7-6D60-459F-AD78-C7F79BF6E4A5" TEXT="We can fix this precedence error by using parentheses" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476634047000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="567E8592-2089-402D-9690-1E21B33B0654" TEXT="&lt;code&gt;ingredients = ['bread', 'peanut butter']&#10;&#10;(['bread', 'peanut butter'][0] =='bread' ||&#10;['bread', 'peanut butter'][1] =='bread') &amp;&amp;&#10;(['bread', 'peanut butter'][0] =='jelly' || &#10;['bread', 'peanut butter'][1] =='jelly')&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476634047000" MODIFIED="1476752021000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="81B58F5B-BD30-4221-BE2B-7BD9F2B02BA3" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638828000" MODIFIED="1476638829000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1933CB6E-737C-4868-AB68-9D579EE223C8" TEXT="Have students fix their code by adding parenthesis" STYLE="fork" FOLDED="false" CREATED="1476638830000" MODIFIED="1476638838000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="3DDA7C0E-CD1B-455B-AF3A-471A706D9C53" TEXT="Framework adjustment: Abstract" STYLE="fork" FOLDED="false" CREATED="1476637942000" MODIFIED="1476638367000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D73CF572-8C83-4E44-8274-1F606A385DF4" STYLE="fork" FOLDED="false" CREATED="1476637948000" MODIFIED="1476637948000"><edge COLOR="#D5D5D5" /><node ID="C458C582-0F6E-43DB-A2F3-21E03C035EA9" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476637967000" MODIFIED="1477612441783"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="4F6E8A25-C52D-4C26-91F9-986954D2D772" TEXT="Coding Framework v2" STYLE="fork" FOLDED="false" CREATED="1476637967000" MODIFIED="1476638137000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="4A864773-0A2C-4559-BA0D-1EEED78E836C" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476637967000" MODIFIED="1476637967000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="AC61DB68-CB8D-404C-84F4-423E78B90238" TEXT="1) Define the problem&#10;2) List the subproblems&#10;3) Solve/Recurse&#10;4) Abstract and clean up" STYLE="fork" FOLDED="false" CREATED="1476637967000" MODIFIED="1476637986000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D4BE5D5D-24BE-4DC6-AB77-9648F319BECE" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476637989000" MODIFIED="1476637989000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E3D8BB67-DB1A-48D4-B5F8-E3C2857ECC05" TEXT="Looking at our code, we can see that it's really messy" STYLE="fork" FOLDED="false" CREATED="1476637989000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="710D6A4B-4342-4F27-BA0C-D71E4541D14E" TEXT="Where do you think we can clean up?" STYLE="fork" FOLDED="false" CREATED="1476638067000" MODIFIED="1476638076000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="7AC05636-E50C-4074-A7E8-050C0BD99020" TEXT="To prompt them, ask what happens if we want to change our required ingredients, or our inventory?" STYLE="fork" FOLDED="false" CREATED="1476638077000" MODIFIED="1476638105000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="A1FFDE39-96F8-4F48-96CD-F799C80E46AA" TEXT="1) we have to repeat the inventory array" STYLE="fork" FOLDED="false" CREATED="1476638010000" MODIFIED="1476638025000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="41941194-00A3-4554-9A58-13269B5728F7" TEXT="2) We have to repeat our required ingredients" STYLE="fork" FOLDED="false" CREATED="1476638025000" MODIFIED="1476638032000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="AE2F4E52-FAFB-443C-80F4-507921B359B9" TEXT="3) If we add items to the array, we need to compare more indexes" STYLE="fork" FOLDED="false" CREATED="1476638035000" MODIFIED="1476638065000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="BD5F575F-A5B8-4FC8-911A-EF3E03CE0D17" TEXT="Subject: Abstraction" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="BCEE5956-470F-47E1-9F4F-F95A4B2BEA0A" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><edge COLOR="#D5D5D5" /><node ID="6B6A7AB6-4F4C-4839-9A02-A782ABF4208D" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1477612441783"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="440A746C-3566-4D0A-A25D-B42238600C7D" TEXT="What is abstraction?" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="5696463F-FC14-4E77-A58A-350FF2D8C48F" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="94574E25-0E82-460A-B89A-1CCB7DDE4B52" TEXT="Abstraction is when we make something less literal" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="FA1CA2E8-3CE8-4012-A1A4-9BBB03673EFD" TEXT="When we name a person, the name is an abstraction of that person" STYLE="fork" FOLDED="false" CREATED="1476638460000" MODIFIED="1476638476000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="B5A84771-B0B7-4CCB-87D9-AFCF218B0ED6" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638419000" MODIFIED="1476638420000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="91411E64-DB32-404C-A9C2-612C43C6A07C" TEXT="One type of abstraction is a name: &#x201c;Tim&quot;; is a person. We use the name &#x201c;Tim&quot; as an abstraction of the person Tim. That way, when I want to tell you about Tim, I can just say his name instead of going and getting Tim and pointing at him while I talk" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="140CC28B-2C70-49DE-BDC3-24A255E8CAC5" TEXT="So too can we refer to things in our code using names" STYLE="fork" FOLDED="false" CREATED="1476638590000" MODIFIED="1476638604000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="BED81EA4-21F3-401E-B161-647FDD09A39C" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><edge COLOR="#D5D5D5" /><node ID="9FCC06BC-462F-412C-B485-16C045B94D5E" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1477612441783"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="ECAB8520-76C0-46AF-BFB5-77E7B4B6A6E9" TEXT="What's a Variable?" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="0D596495-F827-4310-89E0-3C9A11D575DD" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="73956640-2792-445A-B30D-69D0677E3FAF" TEXT="A variable is a name that references something" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="0D7C0506-906C-4FD6-AF2C-8D4A4F47A151" TEXT="Example:" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476638166000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="079C7B88-1D5D-4943-93FB-F33DBAEA159A" TEXT="&lt;code&gt;ingredients = [ 'peanut butter', 'jelly', 'bread' ]&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476638166000" MODIFIED="1476751914000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="E934F391-B054-4327-ACEE-6E34EED347A5" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638620000" MODIFIED="1476638621000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E9A575F7-2F93-43FE-983C-37D64DA5444E" TEXT="Now instead of writing our list over and over again, we can just use the name &#x201c;ingredients&quot;" STYLE="fork" FOLDED="false" CREATED="1476638621000" MODIFIED="1476749060000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E3A3D5C1-AB7C-4E96-A521-6FCAAC3C5752" TEXT="This process is called DRYing your code" STYLE="fork" FOLDED="false" CREATED="1476638702000" MODIFIED="1476638708000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="F377DB8E-F4BF-44BD-A282-CE13B6080E59" TEXT="Don't repeat yourself" STYLE="fork" FOLDED="false" CREATED="1476638708000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="05122E19-C388-41E2-952C-BCE6276A264A" TEXT="The goal of DRYing code is to make it as easy as possible to change it in the future" STYLE="fork" FOLDED="false" CREATED="1476638798000" MODIFIED="1476638808000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="437D5989-840F-4F9D-A010-7FED75EE0CF2" TEXT="Don't DRY until the abstraction step.  Get your program working with duplication, and then DRY it up later" STYLE="fork" FOLDED="false" CREATED="1476742846000" MODIFIED="1476742867000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="685F6591-482D-4FC4-8D95-6747B4C92559" STYLE="fork" FOLDED="false" CREATED="1476638677000" MODIFIED="1476638677000"><edge COLOR="#D5D5D5" /><node ID="BCFD6DF0-3CA2-456C-885F-384B402BB80A" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476638678000" MODIFIED="1477612441783"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="CB16BAA4-87D6-4918-AFF9-7C9296885924" TEXT="Exercise:  DRY up our code" STYLE="fork" FOLDED="false" CREATED="1476638686000" MODIFIED="1476638722000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="68F0AD2C-33A9-4CDE-AF03-876BA706A1B0" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476638726000" MODIFIED="1476638727000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="96512E04-8EEC-4EE0-A9B6-79F4DCB10EC0" TEXT="use a variable to replace all definitions of the ingredient inventory" STYLE="fork" FOLDED="false" CREATED="1476638730000" MODIFIED="1476638778000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D394DDEE-D4BA-4D94-B4BE-A59E3E9D0782" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476638779000" MODIFIED="1476638780000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1CCD44E4-4D09-4FA7-9E4D-1C6C72A18000" TEXT="Now if we want to edit our inventory list, we only have to change it in one place" STYLE="fork" FOLDED="false" CREATED="1476638780000" MODIFIED="1476638791000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="E5F168A8-B504-491F-81F8-6ECDDF6CA79D" TEXT="Subject: Loops" STYLE="fork" FOLDED="false" CREATED="1476638939000" MODIFIED="1476638941000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="94A0988D-A952-42E9-BD3B-42537B1AB179" STYLE="fork" FOLDED="false" CREATED="1476639347000" MODIFIED="1476639347000"><edge COLOR="#D5D5D5" /><node ID="214E72AD-41B4-4223-8D9A-20E1549C0259" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476639349000" MODIFIED="1477612441782"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="313BD678-EF53-4134-9A7D-605F555E8942" TEXT="Abstraction: Loops" STYLE="fork" FOLDED="false" CREATED="1476639350000" MODIFIED="1476639358000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="6C68CD40-904B-4C4D-A646-6E982D14A6E7" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476639369000" MODIFIED="1476639405000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8882AAD3-306F-4BD4-B55E-64770B8C0CCA" TEXT="Loops are how we tell the computer to do something multiple times" STYLE="fork" FOLDED="false" CREATED="1476639386000" MODIFIED="1476742900000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B56FEF51-AD42-4314-BB1A-0136A7D104D7" TEXT="&lt;code&gt;ingredients[0] == 'peanut butter' ||&#10;ingredients[1] == 'peanut butter' ||&#10;ingredients[2] == 'peanut butter'&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476639430000" MODIFIED="1476751993000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="32A69870-D898-476D-AECF-61918529F844" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476639371000" MODIFIED="1476639371000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="AD12EFC5-884F-4A33-94D8-03091E1C269C" TEXT="In our current code, we are repeating the same check " STYLE="fork" FOLDED="false" CREATED="1476639372000" MODIFIED="1476639483000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E7FF5E3A-FF26-4405-B835-A68229D73F95" TEXT="what's the difference between the checks?" STYLE="fork" FOLDED="false" CREATED="1476639483000" MODIFIED="1476743996000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8C51D331-742D-4C44-9158-4443B876FA48" TEXT="the index" STYLE="fork" FOLDED="false" CREATED="1476639489000" MODIFIED="1476639490000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="A0BB2020-CB04-4A5C-817F-9085648C52B5" STYLE="fork" FOLDED="false" CREATED="1476639560000" MODIFIED="1476639560000"><edge COLOR="#D5D5D5" /><node ID="6DDEE612-7F5F-4654-95DF-0B58D8B7170C" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476639560000" MODIFIED="1477612441782"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="99A6BB11-FC57-41BA-B189-5F465F3EE88D" TEXT="Loops: While loop" STYLE="fork" FOLDED="false" CREATED="1476639562000" MODIFIED="1476639568000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="174BA8BF-1915-4B6C-A8D7-760BAC781770" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476639570000" MODIFIED="1476639572000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D3204E91-1207-4B42-B79C-D2C61151B431" TEXT="The while loop is one type of loop that runs until a specific condition is no longer met" STYLE="fork" FOLDED="false" CREATED="1476639572000" MODIFIED="1476752568000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="8E15548B-18AE-4D16-99F8-AA5A25D752D8" TEXT="&lt;code&gt;x = 0&#10;while x &lt; 5&#10;  puts 'Still Looping'&#10;  puts x&#10;  x = x + 1&#10;end&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476742946000" MODIFIED="1476752003000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="90AAAB15-5EFA-4220-B414-C50C68ACB10F" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476639587000" MODIFIED="1476639589000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="A053625D-4AC7-4529-AC4B-94652077FA12" TEXT="While loops allow us to repeat something until some condition is no longer true" STYLE="fork" FOLDED="false" CREATED="1476639589000" MODIFIED="1476743126000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="9211BA1A-4E86-4D07-9E8A-4D02B20B2761" TEXT="Let's walk through the steps the computer is doing in the above loop" STYLE="fork" FOLDED="false" CREATED="1476743127000" MODIFIED="1476743134000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="986F9C48-F547-4C1C-B2AF-E2C9803A71B8" TEXT="How can we use a while loop to abstract our repetition above?" STYLE="fork" FOLDED="false" CREATED="1476743145000" MODIFIED="1476743157000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="99D3B74F-089F-49A7-ADA7-1CC4CF7D70A0" TEXT="just use the number for now, not the length method" STYLE="fork" FOLDED="false" CREATED="1476752682000" MODIFIED="1476752691000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="72950D9C-59FA-4EED-8E32-F23E3A60202B" TEXT="Let's go through all our code and replace everything with while loops" STYLE="fork" FOLDED="false" CREATED="1476743389000" MODIFIED="1476743398000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="984AF07D-40DB-47E5-965C-27DC933838E2" TEXT="Subject: Functions" STYLE="fork" FOLDED="false" CREATED="1476745903000" MODIFIED="1476745908000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="8FFF3F05-DF95-431E-9E3E-B444B7305919" STYLE="fork" FOLDED="false" CREATED="1476745941000" MODIFIED="1476745941000"><edge COLOR="#D5D5D5" /><node ID="1DCFF594-E384-446C-9A50-2B19AD87FDB2" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476745942000" MODIFIED="1477612441782"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="3DE0C0F1-CF72-406A-9221-4CB37FB4616D" TEXT="Abstraction: Functions" STYLE="fork" FOLDED="false" CREATED="1476745943000" MODIFIED="1476745948000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="9E175D41-F733-4D27-A4A8-18A30D4D737B" TEXT="MSCV" STYLE="fork" FOLDED="false" CREATED="1476745949000" MODIFIED="1476746936000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="722D15BC-8EC2-4AA4-9A04-0C0A2A04E295" TEXT="&lt;code&gt;def function_name&#10;  do a thing here&#10;end&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476746929000" MODIFIED="1476752597000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="566A5549-E04B-40F1-A71B-FA8038B360C6" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476746033000" MODIFIED="1476746033000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="4DF8D964-BDC3-4800-A1AF-E0B53536334C" TEXT="They allow us to package a bunch of code together" STYLE="fork" FOLDED="false" CREATED="1476746069000" MODIFIED="1476752650000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="FF5F1BF5-9AF1-404A-A4BB-9F73952F039E" TEXT="Have the students define a function that prints out their names.  Show them they can now use it multiple times in the script side of REPL or in the interactive side" STYLE="fork" FOLDED="false" CREATED="1476746966000" MODIFIED="1476746998000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="D5CD9CF4-694B-485D-B3FE-C7EE895BAAB1" TEXT="Everything in ruby has functions already applied to them" STYLE="fork" FOLDED="false" CREATED="1476748479000" MODIFIED="1476748493000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FA0A663B-E81C-47BD-8B3F-7C087024F609" TEXT="What if we don't know the length of our array?" STYLE="fork" FOLDED="false" CREATED="1476748493000" MODIFIED="1476748496000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="C1FF81E3-EF61-4151-805A-CAAD436BB492" TEXT="Length function/method is a method that exists on the Array.  We don't have to create it ourselves because the creators of Ruby already wrote that function for us" STYLE="fork" FOLDED="false" CREATED="1476748499000" MODIFIED="1476748569000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="3657A09A-67A7-4E09-A6DB-5769A0D7DB01" TEXT="Replace our static length with this method" STYLE="fork" FOLDED="false" CREATED="1476748608000" MODIFIED="1476748633000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="035C05CA-E909-48ED-8DA9-BC42B3A3B9DF" TEXT="Note that the words method/function are used interchangeably.  There is a difference, but not in ruby.  Don't worry about it" STYLE="fork" FOLDED="false" CREATED="1476748509000" MODIFIED="1476752730000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="608A80A7-793A-40A5-9691-63C526D86A38" TEXT="Anything created in the function does not exist outside of the function" STYLE="fork" FOLDED="false" CREATED="1476839795000" MODIFIED="1476839807000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E4140442-744E-488C-82E3-D473D41CA48A" TEXT="scope" STYLE="fork" FOLDED="false" CREATED="1476839807000" MODIFIED="1476839808000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="00CFF97B-644E-4E8A-A455-34E781EED968" TEXT="potentially for week two" STYLE="fork" FOLDED="false" CREATED="1476839816000" MODIFIED="1476839822000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node><node ID="1A8AD07F-36C4-4CCA-98BD-B5E8DB38FD1A" STYLE="fork" FOLDED="false" CREATED="1476747172000" MODIFIED="1476747172000"><edge COLOR="#D5D5D5" /><node ID="D6475EA9-31F3-47BB-81E9-1538C064AC25" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476747172000" MODIFIED="1477612441781"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2E6BB89D-FA33-4B28-B46F-0446563E5F93" TEXT="Functions: Arguments" STYLE="fork" FOLDED="false" CREATED="1476747172000" MODIFIED="1476748078000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="F920BC0F-8FDB-40EB-9F13-1F324633932F" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476747172000" MODIFIED="1476747200000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D4386FE9-AD36-4F85-880A-36BC3A5EC5D0" TEXT="&lt;code&gt;def function_name(argument)&#10;  do a thing here with the argument&#10;end&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476747172000" MODIFIED="1476752862000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="F8895CB1-04BE-4E9C-BC15-C05D975365CF" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476747172000" MODIFIED="1476747172000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="19C80181-A2F2-4210-B1CE-BF8A6348E700" TEXT="Functions can take arguments or parameters" STYLE="fork" FOLDED="false" CREATED="1476747207000" MODIFIED="1476747216000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="0565054C-AC76-4876-B64E-1AEB650FC89B" TEXT="These are kinda like variables, but we don't tell the function what the value of the variable is until we call it" STYLE="fork" FOLDED="false" CREATED="1476747217000" MODIFIED="1476747257000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="9A9EA217-E33E-4FF0-9757-99FC6916ABD2" TEXT="Tell students to define a function that takes a number and tells us if the value is greater than or less than 5" STYLE="fork" FOLDED="false" CREATED="1476747259000" MODIFIED="1476747285000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="89000AD1-73ED-4497-A7E9-390B5D4AABFF" STYLE="fork" FOLDED="false" CREATED="1476747621000" MODIFIED="1476747621000"><edge COLOR="#D5D5D5" /><node ID="94D87680-C532-4EDB-8214-ABF3312F8C9F" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476747621000" MODIFIED="1477612441781"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="051EC148-69EB-4228-BDB0-FC0F88FD1C0D" TEXT="Functions: Return Values" STYLE="fork" FOLDED="false" CREATED="1476747621000" MODIFIED="1476748083000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="C9D6FFC6-FD37-4EAC-BD24-7193CC01B0D4" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476747621000" MODIFIED="1476747621000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D386AF24-992F-40E5-B596-3E65E0662FD5" TEXT="&lt;code&gt;def function_name&#10;  return something&#10;end&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476747621000" MODIFIED="1476752847000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="A4806746-4838-4961-B6E0-91E5C5CE2397" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476747621000" MODIFIED="1476747621000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="9A578AE3-D033-4C91-B9AF-AE8683621E29" TEXT="A function will return a value and we can use this value in our code" STYLE="fork" FOLDED="false" CREATED="1476747665000" MODIFIED="1476752890000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="84E3CEC0-0349-4E7B-9909-6D3FF1A0EF9C" TEXT="write a function that returns the number 5 and save it to a variable" STYLE="fork" FOLDED="false" CREATED="1476747685000" MODIFIED="1476747719000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="0FCCABBC-99F7-4627-BADA-18C3F8B3DDF6" STYLE="fork" FOLDED="false" CREATED="1476838845000" MODIFIED="1476838845000"><edge COLOR="#D5D5D5" /><node ID="1908BC36-0F76-4FDE-B104-D19676E1BD37" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476838846000" MODIFIED="1477612441781"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D15B3630-745F-4300-A912-6149A9E809FD" TEXT="Functions: Methods" STYLE="fork" FOLDED="false" CREATED="1476838847000" MODIFIED="1476838852000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="1E9A5E37-CA78-4421-A954-DF3229D18F38" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476838884000" MODIFIED="1476838886000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="7D4F3108-7445-4C82-ABBD-A5A1FA4324A6" TEXT="['array', 'of', 'things'].length" STYLE="fork" FOLDED="false" CREATED="1476838886000" MODIFIED="1476838913000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="EF54AD5D-5662-46BC-AECE-7AD002B99E83" TEXT="TN" STYLE="fork" FOLDED="false" CREATED="1476838913000" MODIFIED="1476838914000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="E086CE48-36E0-4113-B80A-7AE73F9EBD49" TEXT="If we imagine code as a language, then functions are the verbs" STYLE="fork" FOLDED="false" CREATED="1476838914000" MODIFIED="1476838941000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="43482B2E-B92D-437B-A301-AEB0D2861166" TEXT="They are the doing actions" STYLE="fork" FOLDED="false" CREATED="1476838941000" MODIFIED="1476838953000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="35565CFC-D60F-484D-8485-8F1194FB8642" TEXT="Objects are the nouns, but we'll talk about objects later on.  In this case, our noun is the array, and we are using the 'length' verb, which does a count of how many things there are in the array, and then gives us the value of that count" STYLE="fork" FOLDED="false" CREATED="1476838954000" MODIFIED="1476839005000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="258A8CD2-10E4-4EBE-A91F-5E8F4259CC21" TEXT="tim.run, is a function that tells tim to start running" STYLE="fork" FOLDED="false" CREATED="1476839303000" MODIFIED="1476839316000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="3DCA8869-93D2-42FA-B71C-DA97869C9209" TEXT="tim.eat(sandwich)" STYLE="fork" FOLDED="false" CREATED="1476839322000" MODIFIED="1476839327000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="EB331615-0FF0-442A-90B5-AEAF55C06B28" TEXT="tim is the noun" STYLE="fork" FOLDED="false" CREATED="1476839327000" MODIFIED="1476839332000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="AB701E67-0412-4AFD-9A4E-350E6F937298" TEXT="object" STYLE="fork" FOLDED="false" CREATED="1476839342000" MODIFIED="1476839343000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="B3F5190D-1CDB-42CB-8AC9-8DBB24135D19" TEXT="eat is the verb" STYLE="fork" FOLDED="false" CREATED="1476839332000" MODIFIED="1476839334000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="99217B23-312F-48B7-A8B3-C5C5E316E23A" TEXT="function" STYLE="fork" FOLDED="false" CREATED="1476839344000" MODIFIED="1476839346000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="4CB0D642-215B-473E-B0DF-A9DAACEEA75E" TEXT="sandwich is the noun that the verb is acting on" STYLE="fork" FOLDED="false" CREATED="1476839335000" MODIFIED="1476839341000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="AD19113E-F250-4267-93B3-4B9A36300BEB" TEXT="argument" STYLE="fork" FOLDED="false" CREATED="1476839346000" MODIFIED="1476839348000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node></node><node ID="D6913519-3C9F-4928-A319-FB469840C4E2" STYLE="fork" FOLDED="false" CREATED="1476748050000" MODIFIED="1476748050000"><edge COLOR="#D5D5D5" /><node ID="C4FB85C9-06F5-4E28-8CDF-6D1549AFFCEB" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476748051000" MODIFIED="1477612441780"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="411837C7-227D-4E1F-AFD8-750C2439743B" TEXT="Abstraction: Functions" STYLE="fork" FOLDED="false" CREATED="1476748052000" MODIFIED="1476748089000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="0D366B39-BE9C-42A6-BB21-CB703F561171" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476748089000" MODIFIED="1476748090000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D32CD109-ABA9-439A-8C58-CCE38B9EC4F3" TEXT="Generalize the while loops above into a function" STYLE="fork" FOLDED="false" CREATED="1476748090000" MODIFIED="1476748115000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node></node><node ID="74FF8114-EFA1-4F98-972F-4DF0865B7FC5" TEXT="Debugging" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476749368000" MODIFIED="1476749370000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="32B0173A-0644-4974-AC0D-15E98240E47A" TEXT="Using puts statements to debug" STYLE="fork" FOLDED="false" CREATED="1476749370000" MODIFIED="1476749376000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="33D8C380-B906-420E-B9D6-BB8E4509B8E2" TEXT="Come up with an example here" STYLE="fork" FOLDED="false" CREATED="1476749386000" MODIFIED="1476749390000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1C352DB0-C0A3-4C9C-B879-CD4FD9047E46" TEXT="still looking for examples" STYLE="fork" FOLDED="false" CREATED="1476753513000" MODIFIED="1476753517000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="55BF390F-F942-44C2-AFED-E1B67BC01EF7" TEXT="Recap" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476748272000" MODIFIED="1476748273000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="98AF051C-3B43-40A6-B80E-E312DD25A162" STYLE="fork" FOLDED="false" CREATED="1476748293000" MODIFIED="1476748293000"><edge COLOR="#D5D5D5" /><node ID="97E81A57-65B9-475C-8CBC-E39A347675B4" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476748293000" MODIFIED="1477612441780"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="CA28BB80-4EBB-429E-95A2-062C022D17FA" TEXT="Problem solving framework" STYLE="fork" FOLDED="false" CREATED="1476748296000" MODIFIED="1476748296000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="2995BD9B-4EC0-40E3-BB3B-F45C920A3AC7" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476748300000" MODIFIED="1476748300000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="5B8B4630-76F9-49CA-897B-90A46BF143FD" TEXT="1) Define the problem&#10;2) List the subproblems&#10;3) Solve/Recurse&#10;4) Abstract" STYLE="fork" FOLDED="false" CREATED="1476748311000" MODIFIED="1476748315000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="C12D14BE-B4FB-47AD-96EC-69DBFE0F7347" STYLE="fork" FOLDED="false" CREATED="1476748329000" MODIFIED="1476748329000"><edge COLOR="#D5D5D5" /><node ID="F655FDC6-E94C-47F4-9ACB-D0DFE023ADA2" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476748331000" MODIFIED="1477612441780"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="5C1D470A-DB0B-4C60-BEF3-293FDF91295F" TEXT="Data Types" STYLE="fork" FOLDED="false" CREATED="1476748334000" MODIFIED="1476748334000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="D9326B84-798E-4C04-B6D3-95F9B9BB7ECB" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476748343000" MODIFIED="1476748346000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="99E68172-50B4-4A90-8CFF-AD666E035E4D" TEXT="Arrays: Lists" STYLE="fork" FOLDED="false" CREATED="1476748350000" MODIFIED="1476750091000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="335AC914-E340-4025-AEE1-559526923DBF" TEXT="- Indexes" STYLE="fork" FOLDED="false" CREATED="1476750092000" MODIFIED="1476750092000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="E10E948F-87CF-477A-B693-F3FAB4A49796" TEXT="- Elements/Items" STYLE="fork" FOLDED="false" CREATED="1476750092000" MODIFIED="1476750092000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="14780B8B-D5A1-4599-A271-0D25E3DB4E84" TEXT="- Length function" STYLE="fork" FOLDED="false" CREATED="1476750092000" MODIFIED="1476750092000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="B9E04358-93B6-4C4D-A3E3-FD242A90FFEA" TEXT="Strings: Text" STYLE="fork" FOLDED="false" CREATED="1476748350000" MODIFIED="1476750098000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="91783EC0-9E9E-454B-9C5E-B318DE147C86" TEXT="- single quote" STYLE="fork" FOLDED="false" CREATED="1476750098000" MODIFIED="1476750098000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="2943EFCE-CDEA-41BB-AF71-A05F834671A8" TEXT="- puts method" STYLE="fork" FOLDED="false" CREATED="1476750098000" MODIFIED="1476750098000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="2C12810A-7790-49A2-B727-1E3607063B73" TEXT="Booleans: True/False" STYLE="fork" FOLDED="false" CREATED="1476748350000" MODIFIED="1476750103000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2D474E3E-14F9-4AE5-9E27-8B1533474B95" TEXT="- equalities/inequalities" STYLE="fork" FOLDED="false" CREATED="1476750104000" MODIFIED="1476750104000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="9BAE4844-1DB2-4A56-AA1E-32F06D62FA68" TEXT="- operators &amp;&amp; and ||" STYLE="fork" FOLDED="false" CREATED="1476750104000" MODIFIED="1476750104000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="01704970-7B7B-4C01-AF1F-F9B67B073B00" STYLE="fork" FOLDED="false" CREATED="1476749527000" MODIFIED="1476749527000"><edge COLOR="#D5D5D5" /><node ID="6666E2A2-DFB1-4EC0-B1DE-2005BF21B706" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476749527000" MODIFIED="1477612441779"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="99D69D3F-70E5-407B-B9C9-32D788D495A8" TEXT="Control Flow" STYLE="fork" FOLDED="false" CREATED="1476749527000" MODIFIED="1476749537000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="583B3E40-0676-49D9-B860-FF2905B23A68" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476749527000" MODIFIED="1476749527000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="B04999D7-F8F6-4BB4-B4FF-A85FDBDEF8DB" TEXT="&lt;code&gt;if condition&#10;  then something happens&#10;elsif other_condition&#10;  then something else happens&#10;else&#10;  then the default happens&#10;end&lt;/code&gt;" STYLE="fork" FOLDED="false" CREATED="1476749594000" MODIFIED="1476753566000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="89DEFC06-5A46-41FD-AC91-7C4C14CF6683" STYLE="fork" FOLDED="false" CREATED="1476749436000" MODIFIED="1476749436000"><edge COLOR="#D5D5D5" /><node ID="C513D140-9EA2-4436-B99C-F8C7565C346E" TEXT="Header" STYLE="fork" FOLDED="false" CREATED="1476749436000" MODIFIED="1477612441779"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="EAF01517-23D2-4143-8C75-C98F13FCE217" TEXT="Abstraction" STYLE="fork" FOLDED="false" CREATED="1476749438000" MODIFIED="1476749686000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="AB6F070E-92ED-447E-BB01-B24A3ED463D1" TEXT="SSC" STYLE="fork" FOLDED="false" CREATED="1476749688000" MODIFIED="1476749689000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="92F6C9D5-BFA9-41F7-A42D-E5B1FDF42336" TEXT="Variables" STYLE="fork" FOLDED="false" CREATED="1476750153000" MODIFIED="1476750153000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="548C86D0-6E93-429E-9218-6CB7EE4435EF" TEXT="Names for values" STYLE="fork" FOLDED="false" CREATED="1476750154000" MODIFIED="1476750157000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="2E49B6E4-3512-4520-85E9-A16530139CC3" TEXT="Loops" STYLE="fork" FOLDED="false" CREATED="1476750153000" MODIFIED="1476750153000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="3F2735C1-7DF9-41BD-A48D-0AB1DEF7B9A7" TEXT="Telling the computer to do something multiple times" STYLE="fork" FOLDED="false" CREATED="1476750158000" MODIFIED="1476750165000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="ECADF4D7-AC1A-43C5-8274-44BDFA73E896" TEXT="Functions" STYLE="fork" FOLDED="false" CREATED="1476750153000" MODIFIED="1476750153000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="FA1D14F6-6216-4961-8710-F87FB9FEF0E0" TEXT="Grouping a bunch of instructions together and naming them" STYLE="fork" FOLDED="false" CREATED="1476750166000" MODIFIED="1476750183000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></node><node ID="8DF7C7E9-50FE-4C2A-A903-DEAA48B04234" TEXT="Homework" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476748274000" MODIFIED="1476748275000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="C474CAE2-722E-4D99-9B12-11B4E7ADBDC5" TEXT="Explain how to submit homework" STYLE="fork" FOLDED="false" CREATED="1476750652000" MODIFIED="1476750657000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="2B2C6F35-E6DE-4BAD-95E4-C42AF52E7541" TEXT="Memoizer" STYLE="fork" FOLDED="false" CREATED="1476749724000" MODIFIED="1476749727000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="06602F24-1DA2-4AD9-9F34-7F13BF84B939" TEXT="write a function that takes an array of numbers and returns the sum of those numbers" STYLE="fork" FOLDED="false" CREATED="1476749727000" MODIFIED="1476749750000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="C9ECA243-56C5-4FD9-99F0-95A01B2D6C79" TEXT="using a while loop" STYLE="fork" FOLDED="false" CREATED="1476749762000" MODIFIED="1476749765000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="EF9A007C-BF17-4572-8D24-F624C469AAC9" TEXT="using a for loop" STYLE="fork" FOLDED="false" CREATED="1476749765000" MODIFIED="1476749769000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node><node ID="980327D8-AA99-4C49-B256-7973897A8344" TEXT="reading" STYLE="fork" FOLDED="false" CREATED="1476750003000" MODIFIED="1476750004000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="87CEED95-59D7-472A-B01E-C1233D460F75" TEXT="Abstraction Guide" STYLE="fork" FOLDED="false" CREATED="1476749211000" MODIFIED="1476749211000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="0834510A-A531-475C-BC99-51EA963DFA84" TEXT="Give them a set of instructions for abstraction and then allow them to check their work against the abstraction guide" STYLE="fork" FOLDED="false" CREATED="1476749310000" MODIFIED="1476749325000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="B6B8E613-EC46-4C8E-B244-954C5151047A" TEXT="List of functions they should know for these data types" STYLE="fork" FOLDED="false" CREATED="1476835740000" MODIFIED="1476835756000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="379AC56D-CA73-4F4C-9754-0094F33D22FE" TEXT="Things to practice" STYLE="fork" FOLDED="false" CREATED="1476750008000" MODIFIED="1476750011000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="BB32F265-B3C4-4F8F-BA34-E3F2F76DC32D" TEXT="everything in the recap" STYLE="fork" FOLDED="false" CREATED="1476750017000" MODIFIED="1476750022000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="16235451-3A3A-42FA-BA76-12EAF901D010" TEXT="Commuting to school/work" STYLE="fork" FOLDED="false" CREATED="1476750314000" MODIFIED="1476750588000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="811E69B6-B476-4BBC-A3A5-B7B613CD158E" TEXT="Problem solving framework" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="2F924C55-82CC-4C60-8846-0975D15C877A" TEXT="Fizzbuzz" STYLE="fork" FOLDED="false" CREATED="1476750615000" MODIFIED="1476750618000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="44E95636-FC62-4921-BCA7-B23E2818B892" TEXT="Functions" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="0E9514A0-5C26-416C-9FF8-C112B21156C8" TEXT="Numbers" STYLE="fork" FOLDED="false" CREATED="1476750639000" MODIFIED="1476750640000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D1C7763D-11CD-4B93-860F-6D36621EF1AE" TEXT="explain division" STYLE="fork" FOLDED="false" CREATED="1476750642000" MODIFIED="1476750644000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="1F12F717-2A29-49CF-A6D6-B35BCDC2E207" TEXT="Control Flow" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="FD57A9C7-24C4-4D77-9BAB-36D7492CFB73" TEXT="Booleans: True/False" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="94EF4ED2-821E-4D37-83EA-AC64966D6359" TEXT="Strings: Text" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="6BAFED25-C92D-4B71-9903-95377B788E86" TEXT="Summing numbers" STYLE="fork" FOLDED="false" CREATED="1476750669000" MODIFIED="1476750671000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="B16B24A0-4CBF-406A-8B23-319EF0FE3CA5" TEXT="Functions" STYLE="fork" FOLDED="false" CREATED="1476750696000" MODIFIED="1476750696000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="1496D93F-AF63-436E-B3E9-88C772D2BF9D" TEXT="Memoizers" STYLE="fork" FOLDED="false" CREATED="1476750674000" MODIFIED="1476750676000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="049CC870-738F-4DCA-B92F-B5B7365CE526" TEXT="Loops" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="D682A106-F814-4D60-AFE3-15D7A6996D69" TEXT="while" STYLE="fork" FOLDED="false" CREATED="1476750762000" MODIFIED="1476750763000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="DB1BB710-E2CC-40B0-BA23-A890A8CDA74B" TEXT="for" STYLE="fork" FOLDED="false" CREATED="1476750763000" MODIFIED="1476750764000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="F73E5C6D-9B3A-45DD-ACAC-E2137C0A3F5C" TEXT="Variables" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="ACD7CCCA-122C-4576-B6ED-347E0A40B485" TEXT="Arrays: Lists" STYLE="fork" FOLDED="false" CREATED="1476750264000" MODIFIED="1476750264000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="F21BBF9F-F54F-4B61-A364-862E0EA9590A" TEXT="Summing all numbers greater than some amount" STYLE="fork" FOLDED="false" CREATED="1476750733000" MODIFIED="1476750743000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="BEDACEE9-A77B-4EEF-AF10-E0560990E9BA" TEXT="Includes method" STYLE="fork" FOLDED="false" CREATED="1476836527000" MODIFIED="1476836529000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node><node ID="C3069E4F-CFE8-4828-9477-D11D3AF71F17" TEXT="Glossary" STYLE="bubble" FOLDED="false" POSITION="right" CREATED="1476749196000" MODIFIED="1476749197000"><font SIZE="14" /><edge COLOR="#D5D5D5" /><node ID="317FF7D8-FA36-4411-994C-44BEA9C6B31B" TEXT="Coding environment" STYLE="fork" FOLDED="false" CREATED="1476751183000" MODIFIED="1476751188000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="2DFB2697-A15E-4581-871E-F015AA439A50" TEXT="The various tools you use to code" STYLE="fork" FOLDED="false" CREATED="1476751188000" MODIFIED="1476751193000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="F0156515-3D9C-416A-BD08-C5698E0F9521" TEXT="Text editor" STYLE="fork" FOLDED="false" CREATED="1476751193000" MODIFIED="1476751196000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="EBAD6253-FADA-41FD-9B24-7C60F75C8655" TEXT="Interactive session" STYLE="fork" FOLDED="false" CREATED="1476751196000" MODIFIED="1476751199000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="612641E4-BFC4-40D9-8FA5-81C763A78C91" TEXT="How to run your program" STYLE="fork" FOLDED="false" CREATED="1476751200000" MODIFIED="1476751208000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="05112BDB-F8DA-4F72-B399-495B661729EF" TEXT="Arrays" STYLE="fork" FOLDED="false" CREATED="1476749197000" MODIFIED="1476749198000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="83E84AA7-C235-4423-A822-C9BC487950B5" TEXT="index" STYLE="fork" FOLDED="false" CREATED="1476749814000" MODIFIED="1476749815000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="B34D877E-B26D-45C5-A6CB-1BD7D3582961" TEXT="element" STYLE="fork" FOLDED="false" CREATED="1476749816000" MODIFIED="1476749817000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="AF530E63-A451-4230-A054-F9FEF0D68054" TEXT="Booleans" STYLE="fork" FOLDED="false" CREATED="1476749199000" MODIFIED="1476749200000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1E26A848-2CB8-4D37-874E-008632DC298C" TEXT="inequalities" STYLE="fork" FOLDED="false" CREATED="1476749831000" MODIFIED="1476749834000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="47D2E184-B7D1-4B83-9AA4-CB021F92CC33" TEXT="operators" STYLE="fork" FOLDED="false" CREATED="1476749818000" MODIFIED="1476749830000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="E654D5DF-948D-4297-B74F-AAE1E41E949E" TEXT="Control flow" STYLE="fork" FOLDED="false" CREATED="1476749775000" MODIFIED="1476749782000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="1332C4DD-7BFA-4E35-BFEF-878FF1A6481D" TEXT="if/elsif/else" STYLE="fork" FOLDED="false" CREATED="1476749803000" MODIFIED="1476749807000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="BBD51C0F-41BD-4005-BA1C-D6967B232FA2" TEXT="Loops" STYLE="fork" FOLDED="false" CREATED="1476749800000" MODIFIED="1476749802000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="17E9CE6C-46EF-4C1D-A226-AFDE138F8700" TEXT="while" STYLE="fork" FOLDED="false" CREATED="1476749809000" MODIFIED="1476749809000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="D71A86F1-763C-4228-9ABA-15CB36D93F40" TEXT="for" STYLE="fork" FOLDED="false" CREATED="1476749810000" MODIFIED="1476749811000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="57D37BA0-F1D8-4B22-9DE9-C59A5F962678" TEXT="memoizer" STYLE="fork" FOLDED="false" CREATED="1476750207000" MODIFIED="1476750208000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node><node ID="165E40E0-BFAE-44AE-B012-E71EAC4F19FE" TEXT="Functions" STYLE="fork" FOLDED="false" CREATED="1476749785000" MODIFIED="1476749787000"><font SIZE="12" /><edge COLOR="#D5D5D5" /><node ID="10B313CA-C5D9-4BDA-A427-99EDB84B5CCF" TEXT="def/end" STYLE="fork" FOLDED="false" CREATED="1476749838000" MODIFIED="1476749839000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node><node ID="F6B14AD8-5E62-49CB-8A95-F1407D9F97CA" TEXT="arguments" STYLE="fork" FOLDED="false" CREATED="1476749843000" MODIFIED="1476749844000"><font SIZE="12" /><edge COLOR="#D5D5D5" /></node></node></node></node></map>
